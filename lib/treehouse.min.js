// lib/ui/outline/mod.tsx
var Node = {
  view({ attrs, state, children }) {
    state.expanded = state.expanded !== void 0 ? state.expanded : true;
    const hover = (e) => {
      state.hover = true;
      e.stopPropagation();
    };
    const unhover = (e) => {
      state.hover = false;
      e.stopPropagation();
    };
    const toggle = (e) => {
      if (state.expanded) {
        state.expanded = false;
      } else {
        state.expanded = true;
      }
      e.stopPropagation();
    };
    return /* @__PURE__ */ m("div", { class: "", style: { paddingLeft: "1rem" }, onmouseover: hover, onmouseout: unhover }, /* @__PURE__ */ m("div", { style: {
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      marginTop: "0.125rem",
      marginBottom: "0.125rem"
    } }, /* @__PURE__ */ m(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        style: {
          width: "1rem",
          height: "1rem",
          position: "absolute",
          marginLeft: "-1rem",
          userSelect: "none",
          display: state.hover ? "block" : "none"
        },
        onclick: toggle,
        fill: "gray",
        viewBox: "0 0 16 16"
      },
      /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "7", fill: "lightgray" }),
      !state.expanded && /* @__PURE__ */ m("path", { style: { transform: "scale(0.6) translate(5px, 3px)" }, d: "m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" }),
      state.expanded && /* @__PURE__ */ m("path", { style: { transform: "scale(0.6) translate(5px, 4px)" }, d: "M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" })
    ), /* @__PURE__ */ m("svg", { style: { width: "1rem", height: "1rem", marginRight: "0.5rem" }, xmlns: "http://www.w3.org/2000/svg", fill: "gray", viewBox: "0 0 16 16" }, attrs.data.Linked.Children.length > 0 ? /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "7", fill: "lightgray" }) : null, /* @__PURE__ */ m("circle", { cx: "8", cy: "7", r: "3" })), /* @__PURE__ */ m("span", null, attrs.data.Name)), /* @__PURE__ */ m("div", { style: {
      display: state.expanded ? "flex" : "none",
      flexDirection: "row",
      paddingBottom: "0.25rem"
    } }, /* @__PURE__ */ m("div", { style: { width: "1rem", marginRight: "0.25rem" }, onclick: toggle }, /* @__PURE__ */ m("div", { style: { borderLeft: "1px solid gray", height: "100%", marginLeft: "0.5rem" } })), /* @__PURE__ */ m("div", { style: { flexGrow: "1" } }, attrs.data.Linked.Children.map((id) => /* @__PURE__ */ m(Node, { nodes: attrs.nodes, data: attrs.nodes[id] })))));
  }
};

// lib/manifold/mod.ts
var uniqueId = () => {
  const dateString = Date.now().toString(36);
  const randomness = Math.random().toString(36).substring(2);
  return dateString + randomness;
};
function newNode(name) {
  return { ID: uniqueId(), Name: name, Linked: { Children: [] }, Attrs: {} };
}
function generateNodes(count) {
  const nodes2 = [];
  for (let i = 0; i < count; i++) {
    nodes2.push(newNode(generateWords(randomNumber(2, 6))));
  }
  return nodes2;
}
function generateNodeTree(count) {
  const nodes2 = {};
  const generated = generateNodes(count);
  generated.forEach((n) => {
    nodes2[n.ID] = n;
    if (randomNumber(0, 4) > 0) {
      n.Parent = generated[randomNumber(0, count - 1)].ID;
    }
  });
  for (const [id, n] of Object.entries(nodes2)) {
    if (n.Parent === n.ID) {
      n.Parent = void 0;
    }
    if (n.Parent) {
      nodes2[n.Parent].Linked.Children.push(n.ID);
    }
  }
  return nodes2;
}
var words = [
  "Got",
  "ability",
  "shop",
  "recall",
  "fruit",
  "easy",
  "dirty",
  "giant",
  "shaking",
  "ground",
  "weather",
  "lesson",
  "almost",
  "square",
  "forward",
  "bend",
  "cold",
  "broken",
  "distant",
  "adjective"
];
function getRandomWord(firstLetterToUppercase = false) {
  const word = words[randomNumber(0, words.length - 1)];
  return firstLetterToUppercase ? word.charAt(0).toUpperCase() + word.slice(1) : word;
}
function generateWords(length = 10) {
  return [...Array(length)].map((_, i) => getRandomWord(i === 0)).join(" ").trim();
}
function randomNumber(min, max) {
  return Math.round(Math.random() * (max - min) + min);
}

// lib/ui/app/mod.tsx
var nodes = generateNodeTree(1e3);
var App = {
  view(vnode) {
    return /* @__PURE__ */ m("main", null, Object.values(nodes).filter((n) => n.Parent === void 0).map((n) => /* @__PURE__ */ m(Node, { nodes, data: n })));
  }
};
export {
  App,
  Node
};
